name: nullDC

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: wasm32-unknown-unknown
            publish: true
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target dir
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-cargo-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo bin
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin

      - name: Run tests
        if: matrix.target != 'wasm32-unknown-unknown'
        run: cargo test --target ${{ matrix.target }}

      - name: Build native release
        if: matrix.target != 'wasm32-unknown-unknown'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build wasm and site
        if: matrix.target == 'wasm32-unknown-unknown'
        run: |
          if ! command -v trunk &> /dev/null; then
            cargo install trunk --locked
          fi
          trunk build

      - name: Zip dist
        if: matrix.target == 'wasm32-unknown-unknown'
        run: zip -r dist.zip dist

      - name: Upload wasm dist
        if: matrix.target == 'wasm32-unknown-unknown'
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

      - name: Upload wasm dist.zip
        if: matrix.target == 'wasm32-unknown-unknown'
        uses: actions/upload-artifact@v4
        with:
          name: dist-zip
          path: dist.zip

      - name: Upload native artifacts
        if: matrix.target != 'wasm32-unknown-unknown'
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.target }}
          path: target/${{ matrix.target }}/release

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Publish Production to Cloudflare Pages
        id: deploy
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          NO_COLOR: "1"
        run: |
          set -euo pipefail
          wrangler pages deploy ./dist --project-name nulldc
          json=$(wrangler pages deployment list --project-name nulldc --environment production --json)
          echo "$json"
          url=$(echo "$json" | jq -r 'try .result[0].url catch empty')
          echo "production_url=$url" >> "$GITHUB_OUTPUT"

      - name: Publish Preview to Cloudflare Pages
        id: preview
        if: github.event_name == 'pull_request'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          NO_COLOR: "1"
        run: |
          set -euo pipefail
          wrangler pages deploy dist --project-name nulldc --branch="${{ github.head_ref }}"
          json=$(wrangler pages deployment list --project-name nulldc --environment preview --json)
          echo "$json"
          alias=$(echo "$json" | jq -r 'try .result[0].aliases[0] catch empty')
          url=$(echo "$json" | jq -r 'try .result[0].url catch empty')
          echo "preview_url=${alias:-$url}" >> "$GITHUB_OUTPUT"

      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const url = "${{ steps.preview.outputs.preview_url }}";
            if (!url) {
              core.warning("No preview URL captured");
              return;
            }
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Preview deployed: [${url}](${url})`
            });
