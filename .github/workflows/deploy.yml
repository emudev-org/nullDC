---
name: nullDC
on:
  push:
    branches:
      - main
  pull_request: null
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: wasm32-unknown-unknown
            publish: true
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache target dir
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-cargo-target-${{ matrix.target }}-${{
            hashFiles('**/Cargo.lock') }}
      - name: Cache cargo bin
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin-${{ hashFiles('tool-versions.txt') }}
      - name: "Native: Run tests"
        if: matrix.target != 'wasm32-unknown-unknown'
        run: cargo test --target ${{ matrix.target }}
      - name: "Native: Build release"
        if: matrix.target != 'wasm32-unknown-unknown'
        run: cargo build --release --target ${{ matrix.target }}
      - name: "WASM: Read tool versions"
        if: matrix.target == 'wasm32-unknown-unknown'
        run: |
          #!/usr/bin/env bash
          set -euo pipefail
          # Parse tool-versions.txt into env vars
          while IFS='=' read -r key value; do
            echo "${key}_version=${value}" >> "$GITHUB_ENV"
            echo "${key}_version=${value}"
          done < tool-versions.txt
      - name: "WASM: Install cargo-binstall if missing"
        if: matrix.target == 'wasm32-unknown-unknown'
        run: >
          if ! command -v cargo-binstall &> /dev/null; then
            cargo install cargo-binstall --version "${binstall_version}" --locked
          fi
      - name: "WASM: Install trunk if missing"
        if: matrix.target == 'wasm32-unknown-unknown'
        run: >
          if ! command -v trunk &> /dev/null; then
            cargo binstall trunk --version "${trunk_version}" --locked --no-confirm
          fi
      - name: "WASM: Build code and site"
        if: matrix.target == 'wasm32-unknown-unknown'
        run: |
          trunk build
      - name: "WASM: Upload artifacts"
        if: matrix.target == 'wasm32-unknown-unknown'
        uses: actions/upload-artifact@v4
        with:
          name: site-dist-${{ github.ref_name }}-${{ github.sha }}
          path: dist
      - name: "Native: Upload artifacts"
        if: matrix.target != 'wasm32-unknown-unknown'
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.target }}
          path: target/${{ matrix.target }}/release
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - name: Install Wrangler
        run: npm install -g wrangler
      - name: Publish Production to Cloudflare Pages
        id: deploy
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          NO_COLOR: "1"
        run: |
          set -euo pipefail
          output=$(wrangler pages deploy ./dist --project-name nulldc)
          echo "$output" > wrangler_output.txt
          echo "wrangler_output<<EOF" >> "$GITHUB_OUTPUT"
          cat wrangler_output.txt >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
      - name: Publish Preview to Cloudflare Pages
        id: preview
        if: github.event_name == 'pull_request'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          NO_COLOR: "1"
        run: >
          set -euo pipefail

          output=$(wrangler pages deploy dist --project-name nulldc --branch="${{ github.head_ref }}")

          echo "$output" > wrangler_output.txt

          echo "wrangler_output<<EOF" >> "$GITHUB_OUTPUT"

          cat wrangler_output.txt >> "$GITHUB_OUTPUT"

          echo "EOF" >> "$GITHUB_OUTPUT"
      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${{ steps.preview.outputs.wrangler_output }}`;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
