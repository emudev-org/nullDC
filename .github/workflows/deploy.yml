name: CI & Deploy

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: wasm32-unknown-unknown
            publish: true
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      # Cache Cargo deps
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target dir
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      # Cache installed CLI tools
      - name: Cache cargo bin
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin

      # Run tests on native targets
      - name: Run tests
        if: matrix.target != 'wasm32-unknown-unknown'
        run: cargo test --target ${{ matrix.target }}

      # Build native release
      - name: Build native release
        if: matrix.target != 'wasm32-unknown-unknown'
        run: cargo build --release --target ${{ matrix.target }}

      # Build wasm + bindgen
      - name: Build wasm
        if: matrix.target == 'wasm32-unknown-unknown'
        run: |
          cargo install wasm-bindgen-cli --locked
          cargo build --lib --target wasm32-unknown-unknown --release
          wasm-bindgen --target web --out-dir dist target/wasm32-unknown-unknown/release/nulldc.wasm

      # Zip wasm dist
      - name: Zip dist
        if: matrix.target == 'wasm32-unknown-unknown'
        run: zip -r dist.zip dist

      # Upload artifacts
      - name: Upload wasm dist
        if: matrix.target == 'wasm32-unknown-unknown'
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

      - name: Upload wasm dist.zip
        if: matrix.target == 'wasm32-unknown-unknown'
        uses: actions/upload-artifact@v4
        with:
          name: dist-zip
          path: dist.zip

      - name: Upload native artifacts
        if: matrix.target != 'wasm32-unknown-unknown'
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.target }}
          path: target/${{ matrix.target }}/release

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Publish to Cloudflare Pages
        run: wrangler pages publish dist --project-name nulldc
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

